TODO
---
POTENTIAL FUTURE FEATURES (unordered)
* Something for context.Context? Support cancel() cb and Done() chans? fncontext package...
* seqio.DirOf(dirName), seqio.DirTreeOf(dirName) (recursive)
* RunesOf(string) Seq[rune]
* MakeChan collector func for Reduce()?
* MultiChan() Seq that selects on multiple chan T?
* MergeSort[T any](FuncLess[T], seqs ... Seq[T]) Seq[T] -- lazy merge sorting of pre-sorted Seqs
* Compound FuncCollect, CollectorOf[S,T any](funcs ... FuncCollect[S,T]) FuncCollect[S,[]T]
* Seq[Arithmetic] producing random numbers (in fnmath)?
* Seq for *sql.Rows, with some type safe mechanism for reading rows
* Some kind of "push seq", or is that just Chan? Some libraries only provide "callback based iteration" for data structures.

POTENTIAL FUTURE OPTIMIZATIONS
* EmptySeq impl. (currently just wraps an empty slice), but an empty struct{} would do even better
* Look for allocating buffers of right size where we can
* Can we do some clever allocations in seq.Reduce() when seed is nil?